<!-- Page Heading -->
<div class="row">
    <div class="col-lg-12">
        <h1 class="page-header">
            Categorias
            <small>Listado de todas las catgorias</small>
        </h1>
        <ol class="breadcrumb">
            <li>
                <i class="fa fa-dashboard"></i> <a href="index.html"> Dashboard</a>
            </li>
            <li class="active">
                <i class="fa fa-file"></i> Categorias
            </li>
        </ol>
    </div>
</div>
<div class="row">
    <div class="col-lg-12">
        <table class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <th>Nombre</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
<div class="row">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <ul id="categoriesCont">
        </ul>
    </div>
</div>
<script>
    var SailsCollection = Backbone.Collection.extend({
        sailsCollection: "",
        socket: null,
        sync: function (method, model, options) {
            var where = {};
            if (options.where) {
                where = {
                    where: options.where
                };
            }
            if (typeof this.sailsCollection === "string" && this.sailsCollection !== "") {
                this.socket = io.connect();
                this.socket.on("connect", _.bind(function () {
                    console.log('conected');
                    io.socket.get("/" + this.sailsCollection, where, _.bind(function (users) {
                        this.set(users);
                    }, this));

                    this.socket.on("message", _.bind(function (msg) {
                        var m = msg.uri.split("/").pop();
                        if (m === "create") {
                            this.add(msg.data);
                        } else if (m === "update") {
                            this.get(msg.data.id).set(msg.data);
                        } else if (m === "destroy") {
                            this.remove(this.get(msg.data.id));
                        }
                    }, this));
                }, this));
            } else {
                console.log("Error: Cannot retrieve models because property 'sailsCollection' not set on the collection");
            }
        }
    });

    var CategoryModel = Backbone.Model.extend({
        urlRoot: '/category'
    });

    var CategoryCollection = SailsCollection.extend({
        sailsCollection: 'category',
        model: CategoryModel
    });

    var categories = new CategoryCollection();
    categories.fetch();

    /*$("#postMessageButton").click(function() {
     var messageText = $("#message").val();
     messages.create({
     message: messageText
     }, {
     wait: true
     });
     $("#message").val("");
     });*/

    _.templateSettings = {
        interpolate: /\{\{(.+?)\}\}/g
    };
    var CategoriesView = Backbone.View.extend({
        el: '#categoriesCont',
        initialize: function () {
            this.collection.on('add', this.render, this);
            this.render();
        },
        template: _.template("<li><p>{{ name }}</p></li>"),
        render: function () {
            this.$el.html("");
            this.collection.each(function (msg) {
                this.$el.append(this.template(msg.toJSON()));
            }, this);
        }
    });

    var cView = new CategoriesView({
        collection: categories
    });

</script>
